<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Mise en cache de l'exemple de données du jeu de résultats</title><meta name="Language" content="fr-fr" /><meta name="System.Keywords" content="mise en cache de l'exemple du jeu de résultats" /><meta name="Microsoft.Help.Id" content="13a95ebb-996c-4713-a1bd-5834fe22a334" /><meta name="Description" content="Cet exemple d'application du Pilote JDBC Microsoft pour SQL Server montre comment récupérer un jeu de données volumineux à partir d'une base de données et comment contrôler le nombre de lignes de données mises en cache sur le client à l'aide de la méthode " /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Mise en cache de l'exemple de données du jeu de résultats</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Cet exemple d'application du Pilote JDBC Microsoft pour SQL Server montre comment récupérer un jeu de données volumineux à partir d'une base de données et comment contrôler le nombre de lignes de données mises en cache sur le client à l'aide de la méthode <a href="233bf4f8-4758-42d0-a80b-33e34fa78027.htm">setFetchSize</a> de l'objet <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a>.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Limiter le nombre de lignes mises en cache sur le client et limiter le nombre total de lignes qu'un jeu de résultats peut contenir sont deux choses différentes. Pour contrôler le nombre total de lignes contenues dans un jeu de résultats, utilisez la méthode <a href="cccc0667-589b-4655-8ea8-14ae8b2eb9dc.htm">setMaxRows</a> de l'objet <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>, héritée par les objets <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> et <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a>.</p></div><p>Pour définir une limite du nombre de lignes mises en cache sur le client, vous devez d'abord utiliser un curseur côté serveur lorsque vous créez l'un des objets <b>Statement</b> en indiquant de manière spécifique le type de curseur à utiliser lors de la création de l'objet <b>Statement</b>. Par exemple, le pilote JDBC propose le type de curseur TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, qui est un curseur côté serveur d'avance rapide uniquement et en lecture seule, à utiliser avec les bases de données SQL Server.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Une alternative à l'utilisation d'un type de curseur spécifique à SQL Server est l'utilisation de la propriété de chaîne de connexion selectMethod, en définissant sa valeur sur « curseur ». Pour plus d'informations sur les types de curseurs pris en charge par le pilote JDBC, consultez <span sdata="link"><a href="4f4d3db7-4f76-450d-ab63-141237a4f034.htm">Fonctionnement des types de curseurs</a></span>.</p></div><p>Après avoir exécuté la requête contenue dans l'objet <b>Statement</b> et après que les données ont été retournées au client en tant que jeu de résultats, vous pouvez appeler la méthode <b>setFetchSize</b> pour contrôler la quantité de données extraite de la base de données en une fois. Par exemple, si une table contient 100 lignes de données et si vous définissez la taille d'extraction à 10, seules 10 lignes de données seront mises en cache sur le client à tout moment. Même si ceci ralentit la vitesse de traitement des données, cela présente l'avantage d'utiliser moins de mémoire sur le client, ce qui peut être particulièrement utile lorsque vous devez traiter de grandes quantités de données.</p><p>Le fichier de code de cet exemple est appelé cacheRS.java et se trouve à l'emplacement suivant :</p><p>&lt;<i>répertoire d'installation</i>&gt;\sqljdbc_&lt;<i>version</i>&gt;\&lt;<i>langue</i>&gt;\help\samples\resultsets</p></div><h1 class="heading">Spécifications</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>Pour exécuter cet exemple d'application, vous devez définir l'instruction classpath de façon à inclure le fichier sqljdbc.jar ou sqljdbc4.jar. Si l'instruction classpath n'a pas d'entrée pour sqljdbc.jar ou sqljdbc4.jar, l'exemple d'application lève l'exception usuelle « Classe introuvable ». Vous devrez également accéder à l'exemple de base de données SQL Server 2005 AdventureWorks. Pour plus d'informations sur la définition de l'instruction classpath, consultez <span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">Utilisation du pilote JDBC</a></span>.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Le Pilote JDBC Microsoft pour SQL Server fournit les fichiers bibliothèques de classes sqljdbc.jar et sqljdbc4.jar, à utiliser en fonction de vos paramètres JRE (Java Runtime Environment) par défaut. Pour plus d'informations sur le fichier JAR à choisir, consultez <span sdata="link"><a href="447792bb-f39b-49b4-9fd0-1ef4154c74ab.htm">Configuration requise pour le pilote JDBC</a></span>.</p></div></div><h1 class="heading">Exemple</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>Dans l'exemple suivant, l'exemple de code crée une connexion à l'exemple de base de données AdventureWorks. Puis, il utilise des instructions SQL avec l'objet <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>, spécifie le type de curseur côté serveur, exécute les instructions SQL et place les données qu'il renvoie dans un objet <b>SQLServerResultSet</b>.</p><p>Ensuite, l'exemple de code appelle la méthode personnalisée <b>timerTest</b>, en transmettant en tant qu'arguments la taille d'extraction à utiliser et le jeu de résultats. La méthode <b>timerTest</b> définit alors la taille d'extraction du jeu de résultats en utilisant la méthode <b>setFetchSize</b> et définit l'heure de début du test, puis répète cela pour le jeu de résultats avec une boucle <span class="code">While</span>. Dès la sortie de la boucle <span class="code">While</span>, le code définit l'heure d'arrêt du test et affiche le résultat du test, y compris la taille d'extraction, le nombre de lignes traitées et la durée d'exécution du test.</p><div class="sampleCode"><span codeLanguage="other"><pre>import java.sql.*;
import com.microsoft.sqlserver.jdbc.SQLServerResultSet;

public class cacheRS {

   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;

      try {

         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);

         // Create and execute an SQL statement that returns a large
         // set of data and then display it.
         String SQL = "SELECT * FROM Sales.SalesOrderDetail;";
         stmt = con.createStatement(SQLServerResultSet.TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, +
               SQLServerResultSet.CONCUR_READ_ONLY);

         // Perform a fetch for every row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1, rs);
         rs.close();

         // Perform a fetch for every tenth row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(10, rs);
         rs.close();

         // Perform a fetch for every 100th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(100, rs);
         rs.close();

         // Perform a fetch for every 1000th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1000, rs);
         rs.close();

         // Perform a fetch for every 128th row (the default) in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(0, rs);
         rs.close();
      }

      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }

      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }

   private static void timerTest(int fetchSize, ResultSet rs) {
      try {

         // Declare the variables for tracking the row count and elapsed time.
         int rowCount = 0;
         long startTime = 0;
         long stopTime = 0;
         long runTime = 0;

         // Set the fetch size then iterate through the result set to
         // cache the data locally.
         rs.setFetchSize(fetchSize);
         startTime = System.currentTimeMillis();
         while (rs.next()) {
            rowCount++;
         }
         stopTime = System.currentTimeMillis();
         runTime = stopTime - startTime;

         // Display the results of the timer test.
         System.out.println("FETCH SIZE: " + rs.getFetchSize());
         System.out.println("ROWS PROCESSED: " + rowCount);
         System.out.println("TIME TO EXECUTE: " + runTime);
         System.out.println();

      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}</pre></span></div></div><span id="seeAlsoSpan"><h1 class="heading">Voir aussi</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="4fc4b1c6-3075-4ad7-9244-865d9ede7ae6.htm">Travail sur des jeux de résultats</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Envoyez vos <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dMerci pour vos commentaires qui permettent aux équipes chargées de rédiger la documentation développeur d\'en améliorer la qualité. Pendant la révision de vos commentaires, il est possible que nous vous contactions par courrier électronique afin de vous demander des éclaircissements ou d\'autres commentaires sur la solution envisagée. Nous n\'utilisons pas votre adresse de messagerie dans un autre but et nous la supprimons une fois notre révision terminée.%0\APour plus d\'informations sur les politiques de confidentialité de Microsoft, consultez http://privacy.microsoft.com/fr-fr/default.aspx.%0\A%0\d','Commentaires client.');">commentaires</a> sur cette rubrique à Microsoft.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft. Tous droits réservés.</a></p></span></div></div></body></html>