<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Exemple de mise à jour de données volumineuses</title><meta name="Language" content="fr-fr" /><meta name="System.Keywords" content="mise en mémoire tampon adaptative" /><meta name="System.Keywords" content="exemples de mise en mémoire tampon adaptative" /><meta name="System.Keywords" content="isWrapperFor" /><meta name="System.Keywords" content="données volumineuses" /><meta name="System.Keywords" content="mise en mémoire tampon des réponses" /><meta name="System.Keywords" content="unwrap" /><meta name="System.Keywords" content="utilisation de la mise en mémoire tampon adaptative" /><meta name="Microsoft.Help.Id" content="76ecc05f-a77d-40a2-bab9-91a7fcf17347" /><meta name="Description" content="Cet exemple d'application du Pilote JDBC Microsoft pour SQL Server montre comment mettre à jour une colonne volumineuse dans une base de données." /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Exemple de mise à jour de données volumineuses</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Cet exemple d'application du Pilote JDBC Microsoft pour SQL Server montre comment mettre à jour une colonne volumineuse dans une base de données.</p><p>Le fichier de code pour cet exemple se nomme updateLargeData.java et se trouve à l'emplacement suivant :</p><p>&lt;<i>répertoire d'installation</i>&gt;\sqljdbc_&lt;<i>version</i>&gt;\&lt;<i>langue</i>&gt;\help\samples\adaptive</p></div><h1 class="heading">Spécifications</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>Pour pouvoir exécuter cet exemple d'application, vous devez avoir accès à l'exemple de base de données SQL Server 2005 AdventureWorks. Vous devez également définir l'instruction classpath de façon à inclure le fichier sqljdbc4.jar. Si l'instruction classpath n'a pas d'entrée pour sqljdbc4.jar, l'exemple d'application lève l'exception usuelle « Classe introuvable ». Pour plus d'informations sur la définition de l'instruction classpath, consultez <span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">Utilisation du pilote JDBC</a></span>. </p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Le Pilote JDBC Microsoft pour SQL Server fournit les fichiers bibliothèques de classes sqljdbc.jar et sqljdbc4.jar, à utiliser en fonction de vos paramètres JRE (Java Runtime Environment) par défaut. Cet exemple utilise les méthodes <a href="53f3291f-d43a-476b-a656-d86168dacf6c.htm">isWrapperFor</a> et <a href="ce680176-ef04-4e44-bb6c-ec50bd06e7e6.htm">unwrap</a>, qui sont introduites dans l'API JDBC 4.0, pour accéder aux méthodes de mise en mémoire tampon des réponses spécifiques aux pilotes. Pour pouvoir compiler et exécuter cet exemple, vous devez disposer de la bibliothèque de classes sqljdbc4.jar, qui assure la prise en charge de JDBC 4.0. Pour plus d'informations sur le fichier JAR à choisir, consultez <span sdata="link"><a href="447792bb-f39b-49b4-9fd0-1ef4154c74ab.htm">Configuration requise pour le pilote JDBC</a></span>.</p></div></div><h1 class="heading">Exemple</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>Dans l'exemple suivant, le code établit une connexion à la base de données SQL Server 2005 AdventureWorks. L'exemple de code crée ensuite un objet Statement et utilise la méthode <a href="53f3291f-d43a-476b-a656-d86168dacf6c.htm">isWrapperFor</a> pour vérifier si l'objet Statement est un wrapper pour la classe <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> spécifiée. La méthode <a href="ce680176-ef04-4e44-bb6c-ec50bd06e7e6.htm">unwrap</a> permet d'accéder aux méthodes de mise en mémoire tampon des réponses spécifiques aux pilotes. </p><p>L'exemple de code affecte ensuite « <span sdata="langKeyword" value="adaptive"><span class="keyword">adaptive</span></span> » au mode de mise en mémoire tampon des réponses en utilisant la méthode <a href="9f489835-6cda-4c8c-b139-079639a169cf.htm">setResponseBuffering</a> de la classe <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> ; en outre, il montre également comment obtenir le mode de mise en mémoire tampon adaptative.</p><p>Il exécute ensuite l'instruction SQL et place les données retournées dans un objet <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> pouvant être mis à jour. </p><p>Pour finir, l'exemple de code itère son exécution sur les lignes de données contenues dans le jeu de résultats. S'il trouve un résumé de document vide, il utilise la combinaison des méthodes <a href="0cf286c7-9dcd-4b02-a568-ba6b6eb27e82.htm">updateString</a> et <a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a> pour mettre à jour la ligne de données et la rendre à nouveau persistante dans la base de données. Si des données sont déjà présentes, l'exemple utilise la méthode <a href="f81dde01-d328-4b32-8871-1efac645b68e.htm">getString</a> pour afficher une partie des données contenues.</p><p>Le comportement par défaut du pilote est « <span sdata="langKeyword" value="adaptive."><span class="keyword">adaptive.</span></span> » Toutefois, pour les jeux de résultats de type avant uniquement pouvant être mis à jour et lorsque la taille des données du jeu de résultats est supérieure à la capacité de la mémoire de l'application, cette dernière doit définir le mode de mise en mémoire tampon adaptative de manière explicite à l'aide de la méthode <a href="9f489835-6cda-4c8c-b139-079639a169cf.htm">setResponseBuffering</a> de la classe <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>.</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>import java.sql.*;
import java.io.*;
import com.microsoft.sqlserver.jdbc.SQLServerStatement;

public class updateLargeData {
	
   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = 
    	    "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;  
      Reader reader = null;

      try {
          // Establish the connection.
          Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
          con = DriverManager.getConnection(connectionUrl);

          stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);

          // Since the summaries could be large, make sure that
          // the driver reads them incrementally from a database, 
          // even though a server cursor is used for the updatable result sets.

          // The recommended way to access the Microsoft JDBC Driver for SQL Server 
          // specific methods is to use the JDBC 4.0 Wrapper functionality. 
          // The following code statement demonstrates how to use the 
          // Statement.isWrapperFor and Statement.unwrap methods
          // to access the driver specific response buffering methods.

          if (stmt.isWrapperFor(com.microsoft.sqlserver.jdbc.SQLServerStatement.class)) {
              SQLServerStatement SQLstmt = 
                 stmt.unwrap(com.microsoft.sqlserver.jdbc.SQLServerStatement.class);
        	  
              SQLstmt.setResponseBuffering("adaptive");
              System.out.println("Response buffering mode has been set to " +
                 SQLstmt.getResponseBuffering());
          }

          // Select all of the document summaries.
          rs = stmt.executeQuery("SELECT Title, DocumentSummary FROM Production.Document");

          // Update each document summary.
          while (rs.next()) {

               // Retrieve the original document summary.
               reader = rs.getCharacterStream("DocumentSummary");

               if (reader == null)
               {
                   // Update the document summary.
                   System.out.println("Updating " + rs.getString("Title"));
                   rs.updateString("DocumentSummary", "Work in progress");
                   rs.updateRow();
               }
               else
               {
            	   // Do something with the chunk of the data that was                   
                   // read.
                   System.out.println("reading " + rs.getString("Title"));
                   reader.close();
                   reader = null;
               }
          }
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }
      finally {
          if (reader != null) try { reader.close(); } catch(Exception e) {}
          if (rs != null) try { rs.close(); } catch(Exception e) {}
          if (stmt != null) try { stmt.close(); } catch(Exception e) {}
    	  if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }
}

</pre></span></div></div></div><span id="seeAlsoSpan"><h1 class="heading">Voir aussi</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="5b93569f-eceb-4f05-b49c-067564cd3c85.htm">Utilisation de données volumineuses</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Envoyez vos <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dMerci pour vos commentaires qui permettent aux équipes chargées de rédiger la documentation développeur d\'en améliorer la qualité. Pendant la révision de vos commentaires, il est possible que nous vous contactions par courrier électronique afin de vous demander des éclaircissements ou d\'autres commentaires sur la solution envisagée. Nous n\'utilisons pas votre adresse de messagerie dans un autre but et nous la supprimons une fois notre révision terminée.%0\APour plus d\'informations sur les politiques de confidentialité de Microsoft, consultez http://privacy.microsoft.com/fr-fr/default.aspx.%0\A%0\d','Commentaires client.');">commentaires</a> sur cette rubrique à Microsoft.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft. Tous droits réservés.</a></p></span></div></div></body></html>