<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Exemple de type de données SQLXML</title><meta name="Language" content="fr-fr" /><meta name="System.Keywords" content="exemple de type de données SQLXML" /><meta name="Microsoft.Help.Id" content="8f2ff25b-71fd-46d7-b6de-d656095d2aad" /><meta name="Description" content="Cet exemple d'application du Pilote JDBC Microsoft pour SQL Server montre comment stocker des données XML dans une base de données relationnelle, comment récupérer des données XML à partir d'une base de données et comment analyser des données XML à l'aide " /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Exemple de type de données SQLXML</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Cet exemple d'application du Pilote JDBC Microsoft pour SQL Server montre comment stocker des données XML dans une base de données relationnelle, comment récupérer des données XML à partir d'une base de données et comment analyser des données XML à l'aide du type de données Java <span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span>.</p><p>Les exemples de code de cette section utilisent un analyseur SAX (Simple API for XML). La norme SAX est une norme développée de manière publique pour l'analyse de documents XML en fonction des événements. Elle fournit également une interface de programmation d'applications pour l'utilisation des données XML. Notez que les applications peuvent également utiliser d'autres analyseurs XML, par exemple DOM (Document Object Model), StAX (Streaming API for XML), etc. </p><p>DOM (Document Object Model) fournit une représentation par programme des documents, fragments, nœuds ou éléments node-set XML. Il fournit également une interface de programmation d'applications pour l'utilisation des données XML. De même, StAX (Streaming API for XML) est une API Java pour l'analyse par extraction du code XML.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Pour pouvoir utiliser l'API de l'analyseur SAX, vous devez importer l'implémentation SAX standard à partir du package javax.xml.</p></div><p>Le fichier de code pour cet exemple se nomme sqlxmlExample.java et se trouve à l'emplacement suivant :</p><p>&lt;<i>répertoire d'installation</i>&gt;\sqljdbc_&lt;<i>version</i>&gt;\&lt;<i>langue</i>&gt;\help\samples\datatypes</p></div><h1 class="heading">Spécifications</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>Pour exécuter cet exemple d'application, vous devez définir l'instruction classpath de façon à inclure le fichier sqljdbc4.jar. Si l'instruction classpath n'a pas d'entrée pour sqljdbc4.jar, l'exemple d'application lève l'exception « Classe introuvable ». Pour plus d'informations sur la définition de l'instruction classpath, consultez <span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">Utilisation du pilote JDBC</a></span>.</p><p>En outre, vous devez avoir accès à l'exemple de base de données SQL Server 2005 AdventureWorks pour pouvoir exécuter cet exemple d'application.</p></div><h1 class="heading">Exemple</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>Dans l'exemple suivant, le code effectue une connexion à la base de données SQL Server 2005 AdventureWorks, puis appelle la méthode createSampleTables. </p><p>La méthode createSampleTables supprime les tables de test, TestTable1 et TestTable2, si elles existent déjà. Elle insère ensuite deux lignes dans TestTable1. </p><p>En outre, l'exemple de code ajoute les trois méthodes décrites ci-après et une classe supplémentaire dont le nom est ExampleContentHandler. </p><p>La classe ExampleContentHandler implémente un gestionnaire de contenu personnalisé qui définit les méthodes pour les événements de l'analyseur.</p><p>La méthode showGetters montre comment analyser les données de l'objet SQLXML à l'aide de l'analyseur SAX, de ContentHandler et de XMLReader. En premier lieu, l'exemple de code crée une instance d'un gestionnaire de contenu personnalisé dont le nom est ExampleContentHandler. Il crée et exécute ensuite une instruction SQL qui retourne un jeu de données à partir de TestTable1. L'exemple de code obtient ensuite un analyseur SAX pour analyser les données XML.</p><p>La méthode showSetters montre comment définir la colonne <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> à l'aide de l'analyseur SAX, de ContentHandler et de ResultSet. En premier lieu, elle crée un objet SQLXML vide à l'aide de la méthode <a href="cf5bfcdd-bc03-4c5b-b554-d8a8a4067e93.htm">createSQLXML</a> de la classe Connection. Elle obtient ensuite une instance d'un gestionnaire de contenu pour écrire les données dans l'objet SQLXML. L'exemple de code écrit ensuite les données dans TestTable1. Pour finir, l'exemple de code itère son exécution sur les lignes de données contenues dans le jeu de résultats, puis utilise la méthode <a href="a07e0f30-cbc6-4ad7-b931-c30cad382e64.htm">getSQLXML</a> pour lire les données XML.</p><p>La méthode showTransformer montre comment obtenir des données XML à partir d'une table pour les insérer dans une autre table à l'aide de l'analyseur SAX et du transformateur. En premier lieu, elle récupère l'objet SQLXML source à partir de TestTable1. Elle crée ensuite un objet SQLXML de destination vide à l'aide de la méthode <a href="cf5bfcdd-bc03-4c5b-b554-d8a8a4067e93.htm">createSQLXML</a> de la classe Connection. Elle met ensuite à jour l'objet SQLXML de destination et écrit les données XML dans TestTable2. Pour finir, l'exemple de code itère son exécution sur les lignes de données contenues dans le jeu de résultats, puis utilise la méthode <a href="a07e0f30-cbc6-4ad7-b931-c30cad382e64.htm">getSQLXML</a> pour lire les données XML dans TestTable2.</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>import java.sql.*;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;

import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.sax.SAXTransformerFactory;

import org.xml.sax.*;

public class sqlxmlExample {

   public static void main(String[] args) {
	   
      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;

      try {
         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);

         // Create initial sample data.
         createSampleTables(con);

         // The showGetters method demonstrates how to parse the data in the 
         // SQLXML object by using the SAX, ContentHandler and XMLReader.  
         showGetters(con);            

         // The showSetters method demonstrates how to set the xml column 
         // by using the SAX, ContentHandler, and ResultSet.
         showSetters(con);   

         // The showTransformer method demonstrates how to get an XML data 
         // from one table and insert that XML data to another table 
         // by using the SAX and the Transformer. 
         showTransformer(con);        
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }
      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }

   private static void showGetters(Connection con) {
	   
      try {
          // Create an instance of the custom content handler.   
          ExampleContentHandler myHandler = new ExampleContentHandler();
		   
          // Create and execute an SQL statement that returns a
          // set of data.       
          String SQL = "SELECT * FROM TestTable1";
          Statement stmt = con.createStatement();
          ResultSet rs = stmt.executeQuery(SQL);

          rs.next();

          SQLXML xmlSource = rs.getSQLXML("Col3");

          // Send SAX events to the custom content handler.
          SAXSource sxSource =  xmlSource.getSource(SAXSource.class);
          XMLReader xmlReader = sxSource.getXMLReader();
          xmlReader.setContentHandler(myHandler);

	      System.out.println("showGetters method: Parse an XML data in TestTable1 =&gt; ");
          xmlReader.parse(sxSource.getInputSource());

      } catch (Exception e) {
          e.printStackTrace();
      }
   }

   private static void showSetters(Connection con) {

      try {
         // Create and execute an SQL statement, retrieving an updatable result set.
         String SQL = "SELECT * FROM TestTable1;";
         Statement stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
         ResultSet rs = stmt.executeQuery(SQL);
		   
         // Create an empty SQLXML object.
         SQLXML sqlxml = con.createSQLXML();

         // Set the result value from SAX events.
         SAXResult sxResult = sqlxml.setResult(SAXResult.class);
         ContentHandler myHandler = sxResult.getHandler();

         // Set the XML elements and attributes into the result.
         myHandler.startDocument();
         myHandler.startElement(null, "contact", "contact", null);
         myHandler.startElement(null, "name", "name", null);
         myHandler.endElement(null, "name", "name");
         myHandler.startElement(null, "phone", "phone", null);
         myHandler.endElement(null, "phone", "phone");		   
         myHandler.endElement(null, "contact", "contact");
         myHandler.endDocument();

         // Update the data in the result set.
         rs.moveToInsertRow();
         rs.updateString("Col2", "C");
         rs.updateSQLXML("Col3", sqlxml);
         rs.insertRow();
		   
         // Display the data. 
         System.out.println("showSetters method: Display data in TestTable1 =&gt; ");
         while (rs.next()) {
           System.out.println(rs.getString("Col1") + " : " + rs.getString("Col2"));
           SQLXML xml = rs.getSQLXML("Col3");              
           System.out.println("XML column : " + xml.getString());
         }
      } catch (Exception e) {
         e.printStackTrace();
      }
   }

   private static void showTransformer(Connection con) {

      try {
          // Create and execute an SQL statement that returns a
          // set of data.       
          String SQL = "SELECT * FROM TestTable1";
          Statement stmt = con.createStatement();
          ResultSet rs = stmt.executeQuery(SQL);
	       
          rs.next();
	        
          // Get the value of the source SQLXML object from the database.
          SQLXML xmlSource = rs.getSQLXML("Col3");
	        
          // Get a Source to read the XML data. 
          SAXSource sxSource =  xmlSource.getSource(SAXSource.class);
	        
         // Create a destination SQLXML object without any data.
         SQLXML xmlDest = con.createSQLXML();

         // Get a Result to write the XML data.
         SAXResult sxResult = xmlDest.setResult(SAXResult.class);
	        
         // Transform the Source to a Result by using the identity transform.
         SAXTransformerFactory stf = (SAXTransformerFactory) TransformerFactory.newInstance();
         Transformer identity = stf.newTransformer();
         identity.transform(sxSource, sxResult);

         // Insert the destination SQLXML object into the database.
         PreparedStatement psmt = 
           con.prepareStatement(
              "INSERT INTO TestTable2" + " (Col2, Col3, Col4, Col5) VALUES (?, ?, ?, ?)");
         psmt.setString(1, "A");
         psmt.setString(2, "Test data");
         psmt.setInt(3, 123);
         psmt.setSQLXML(4, xmlDest);
         psmt.execute();
	        
         // Execute the query and display the data.	
         SQL = "SELECT * FROM TestTable2";
         stmt = con.createStatement();
         rs = stmt.executeQuery(SQL);

         System.out.println("showTransformer method : Display data in TestTable2 =&gt; ");
         while (rs.next()) {
            System.out.println(rs.getString("Col1") + " : " + rs.getString("Col2"));
            System.out.println(rs.getString("Col3") + " : " + rs.getInt("Col4"));
	          
            SQLXML xml = rs.getSQLXML("Col5");              
            System.out.println("XML column : " + xml.getString());
         }
     } catch (Exception e) {
        e.printStackTrace();
     }
   }

   private static void createSampleTables(Connection con) {

      try {
	  Statement stmt = con.createStatement();
		  
          // Drop the tables.
	  stmt.executeUpdate("if exists (select * from sys.objects where name = 'TestTable1')" +
                "drop table TestTable1" );

          stmt.executeUpdate("if exists (select * from sys.objects where name = 'TestTable2')" +
                "drop table TestTable2" );		  

          // Create empty tables.
          stmt.execute("CREATE TABLE TestTable1 (Col1 int IDENTITY, Col2 char, Col3 xml)");
          stmt.execute("CREATE TABLE TestTable2 (Col1 int IDENTITY, Col2 char, Col3 varchar(50), Col4 int, Col5 xml)");

          // Insert two rows to the TestTable1.
         String row1 = "&lt;contact&gt;&lt;name&gt;Contact Name 1&lt;/name&gt;&lt;phone&gt;XXX-XXX-XXXX&lt;/phone&gt;&lt;/contact&gt;";
         String row2 = "&lt;contact&gt;&lt;name&gt;Contact Name 2&lt;/name&gt;&lt;phone&gt;YYY-YYY-YYYY&lt;/phone&gt;&lt;/contact&gt;";

         stmt.executeUpdate("insert into TestTable1" + " (Col2, Col3) values('A', '" + row1 +"')");
         stmt.executeUpdate("insert into TestTable1" + " (Col2, Col3) values('B', '" + row2 +"')");
	      
       } catch (Exception e) {
          e.printStackTrace();
       }
   }
}

class ExampleContentHandler implements ContentHandler {

  public void startElement(String namespaceURI, String localName, String qName, Attributes atts) 
  throws SAXException {
	  System.out.println("startElement method: localName =&gt; " + localName);
  }
  public void characters(char[] text, int start, int length) throws SAXException {
  	  System.out.println("characters method");  
  }
  public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
      System.out.println("endElement method: localName =&gt; " + localName);		  
  } 
  public void setDocumentLocator(Locator locator) {
	  System.out.println("setDocumentLocator method");
  }
  public void startDocument() throws SAXException {
	  System.out.println("startDocument method");
  }
  public void endDocument() throws SAXException {
	  System.out.println("endDocument method");
  }
  public void startPrefixMapping(String prefix, String uri) throws SAXException {
	  System.out.println("startPrefixMapping method: prefix =&gt; " + prefix);
  }
  public void endPrefixMapping(String prefix) throws SAXException {
	  System.out.println("endPrefixMapping method: prefix =&gt; " + prefix);
  }
  public void skippedEntity(String name) throws SAXException {
	  System.out.println("skippedEntity method: name =&gt; " + name);
  }  
  public void ignorableWhitespace(char[] text, int start, int length) throws SAXException {
	  System.out.println("ignorableWhiteSpace method");
  }
  public void processingInstruction(String target, String data) throws SAXException {
	  System.out.println("processingInstruction method: target =&gt; " + target);
  }
}

</pre></span></div></div></div><span id="seeAlsoSpan"><h1 class="heading">Voir aussi</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="b39f44d0-3710-4bc6-880c-35bd8c10a734.htm">Travail sur des types de données (JDBC)</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Envoyez vos <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dMerci pour vos commentaires qui permettent aux équipes chargées de rédiger la documentation développeur d\'en améliorer la qualité. Pendant la révision de vos commentaires, il est possible que nous vous contactions par courrier électronique afin de vous demander des éclaircissements ou d\'autres commentaires sur la solution envisagée. Nous n\'utilisons pas votre adresse de messagerie dans un autre but et nous la supprimons une fois notre révision terminée.%0\APour plus d\'informations sur les politiques de confidentialité de Microsoft, consultez http://privacy.microsoft.com/fr-fr/default.aspx.%0\A%0\d','Commentaires client.');">commentaires</a> sur cette rubrique à Microsoft.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft. Tous droits réservés.</a></p></span></div></div></body></html>